name: Rust CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal
          override: true

      - name: Cache cargo
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Build
        run: cargo build --all --locked

      - name: Check (all targets)
        run: cargo check --all-targets --locked

      - name: Test
        run: cargo test --all --locked

      - name: Clippy (deny warnings, all targets)
        run: cargo clippy --all-targets -- -D warnings

name: Rust CI

on:
  workflow_dispatch:
  pull_request:
    types: [opened, reopened, synchronize, ready_for_review]

concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.ref }}
  cancel-in-progress: true

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
      - name: Set up Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          components: rustfmt, clippy
      - name: Install system dependencies
        run: sudo apt-get update && sudo apt-get install -y libsqlite3-dev

      - name: Cargo fetch
        run: cargo fetch

      - name: Check formatting
        run: cargo fmt --all --check

      - name: Cargo check (all targets)
        run: cargo check --all --all-targets --all-features

      - name: Run linter (clippy)
        run: cargo clippy --all --all-targets --all-features -- -D warnings

      - name: Run tests
        run: cargo test --all --all-features

      # - name: Run example suite
      #   if: ${{ secrets.OPENAI_API_KEY != '' }}
      #   env:
      #     OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
      #   run: cargo run --bin run_examples --quiet

  
